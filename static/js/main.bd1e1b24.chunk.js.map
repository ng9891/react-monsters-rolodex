{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchBox/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","handleSearchChange","e","setState","searchField","target","value","state","handleSearchChange2","bind","fetch","then","response","json","console","log","this","filteredMonster","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mVAUaA,G,YAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCITC,EAAW,SAACR,GAAD,OACtB,yBAAKC,UAAU,SACZD,EAAMS,SAASC,KAAI,SAACN,GACnB,OAAO,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SClBhCQ,G,MAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACtC,OAAO,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC4CtEG,G,wDA3Cb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAeRkB,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAEf,EAAKI,oBAAuB,EAAKA,oBAAoBC,KAAzB,gBANX,E,gEASE,IAAD,OAClBC,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACE,GAC5F,EAAKV,SAAS,CAACX,SAAUqB,IACzBC,QAAQC,IAAIF,Q,0CAQIX,GAClBc,KAAKb,SAAS,CAACC,YAAaF,EAAEG,OAAOC,U,+BAG7B,IAAD,EACyBU,KAAKT,MAA9Bf,EADA,EACAA,SAAUY,EADV,EACUA,YACXa,EAAkBzB,EAAS0B,QAAO,SAAC/B,GAAD,OACtCA,EAAQE,KAAK8B,cAAcC,SAAShB,EAAYe,kBAGlD,OACE,yBAAKnC,UAAU,OACb,wBAAIA,UAAU,SAAd,sBACA,kBAAC,EAAD,CACEY,YAAY,sBACZC,aAAcmB,KAAKR,sBAErB,kBAAC,EAAD,CAAUhB,SAAUyB,S,GAtCVI,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.bd1e1b24.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\n// export const Card = (props)=>{\r\n//   return <div className='card-container'>\r\n//     <h1>{props.monster.name}</h1>\r\n//   </div>\r\n// }\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component.jsx';\r\n\r\n// export const CardList = (props) => {\r\n//   if (!props.monsters) return <div />;\r\n\r\n//   return (\r\n//     <div className=\"cards\">\r\n//       {\r\n//         props.monsters.map((monster) => {\r\n//           return <Card key={monster.id} monster={monster} />;\r\n//         })\r\n//       }\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport const CardList = (props) => (\r\n  <div className=\"cards\">\r\n    {props.monsters.map((monster) => {\r\n      return <Card key={monster.id} monster={monster} />;\r\n    })}\r\n  </div>\r\n);\r\n","import React from 'react'\r\nimport './searchBox.style.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>{\r\n  return <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n}","import React from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/searchBox/searchBox.component.jsx';\nimport './App.css';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n    this.handleSearchChange2 =  this.handleSearchChange2.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then((response) => response.json()).then((json) => {\n      this.setState({monsters: json});\n      console.log(json);\n    });\n  }\n\n  handleSearchChange = (e) => {\n    this.setState({searchField: e.target.value});\n  };\n\n  handleSearchChange2(e){\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonster = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 className='title'> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder=\"Search monster name\"\n          handleChange={this.handleSearchChange2}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}